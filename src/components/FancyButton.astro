---
import { hyprThemeColors } from "#lib/consts"
import chroma from "chroma-js"

type Props = (
  | {
      type: "link"
      href: string
      newTab?: boolean
    }
  | { type: "button" }
) & {
  label: string
  class?: string
  colors?: { light: string; middle: string }
}
const {
  type,
  label,
  colors = { light: hyprThemeColors[0], middle: hyprThemeColors[2] },
  ...props
} = Astro.props

const href = "href" in props && props.href

const [between1, between2, between3] = chroma
  .scale([colors.middle, colors.light])
  .mode("hsl")
  .correctLightness()
  .colors(3) as [string, string, string]

// const between1 = gradientColors()
---

<a
  href={href + ""}
  class="element relative inline-flex flex-row items-center justify-center gap-2 rounded-3xl px-6 py-3 text-center text-lg font-bold text-white transition-all hover:-translate-y-1 active:translate-y-1 active:duration-75"
  class:list={Astro.props.class?.split("")}
  target={"newTab" in Astro.props && Astro.props.newTab ? "_blank" : ""}
  >{label}
  <slot />
  <div class="gradient"></div>
  <div class="gradient3d"></div>
</a>

<style
  define:vars={{
    ...colors,
    between1,
    between2,
    between3,
  }}
>
  .element {
    --roundness: 20px;
    --border: 2px;
  }

  /* Gracefully stolen and adapted from https://velocity.builder.io */
  .gradient {
    position: absolute;
    width: calc(100% + var(--border));
    height: calc(100% + var(--border));
    inset: 0;
    z-index: -1;
    border-radius: var(--roundness);
    overflow: hidden;
    background: var(--middle);
    /* linear-gradient(
      to top right,
      theme(colors.black),
      var(--middle),
      theme(colors.black),
      var(--middle)
    ); */
    transition: all cubic-bezier(0.4, 0, 0.2, 1) 540ms;
    animation: shadow 2.3s linear infinite;
    box-shadow: 0px 12px 60px color-mix(in srgb, var(--middle) 30%, transparent);

    .element:hover & {
      box-shadow: 0px 12px 60px
        color-mix(in srgb, var(--middle) 50%, transparent);
    }

    &:before {
      content: " ";
      position: absolute;
      z-index: -2;
      left: -50%;
      top: -50%;
      width: 200%;
      height: 200%;
      background-repeat: no-repeat;
      background: linear-gradient(
        transparent,
        var(--between1),
        var(--between2),
        var(--between3),
        var(--light),
        var(--between3),
        var(--between2),
        var(--between1),
        transparent
      );
      animation: rotate 4.6s linear infinite;
    }

    &::after {
      --hoverOffset: 0.2rem;
      content: "";
      position: absolute;
      z-index: -1;
      left: var(--border);
      top: var(--border);
      width: calc(100% - var(--border) * 2);
      height: calc(100% - var(--border) * 2);
      background: theme(colors.black);
      border-radius: calc(var(--roundness) - var(--border));
      transition: all cubic-bezier(0.1, 0, 0.2, 1) 350ms;

      .element:hover & {
        width: calc(100% - var(--border) * 2 - var(--hoverOffset));
        height: calc(100% - var(--border) * 2 - var(--hoverOffset));
        left: calc(var(--border) + var(--hoverOffset) * 0.5);
        top: calc(var(--border) + var(--hoverOffset) * 0.5);
      }
    }
  }

  .gradient3d {
    position: absolute;
    width: calc(100% + var(--border));
    height: calc(100% + var(--border));
    inset: 0;
    translate: 0px 6px;
    z-index: -4;
    border-radius: var(--roundness);
    overflow: hidden;
    background: var(--middle);
    @apply transition-all duration-75;

    &:before {
      content: " ";
      position: absolute;
      z-index: -2;
      left: -150%;
      top: -100%;
      width: 400%;
      height: 400%;
      background-repeat: no-repeat;
      background: linear-gradient(
        transparent,
        var(--between1),
        var(--between2),
        var(--between3) 48%,
        var(--light),
        var(--between3) 52%,
        var(--between2),
        var(--between1),
        transparent
      );
      animation: rotate3d 4.6s linear infinite;
    }
    .element:hover & {
      translate: 0px 8px;
    }
    .element:active & {
      translate: 0px 4px;
    }
  }

  /* .3d {
    position: absolute;
    z-index: -2;
    left: -50%;
    top: -50%;
    width: 200%;
    height: 200%;
    background-repeat: no-repeat;
    background: linear-gradient(
      transparent,
      var(--between1),
      var(--between2),
      var(--between3),
      var(--light),
      var(--between3),
      var(--between2),
      var(--between1),
      transparent
    );
    animation: rotate 4.6s linear infinite;
  } */

  /* @keyframes shadow {
    0%,
    80% {
      box-shadow: 0px 12px 60px
        color-mix(in srgb, var(--middle) 50%, transparent);
    }
    90% {
      box-shadow: 0px 12px 60px
        color-mix(in srgb, var(--light) 50%, transparent);
    }
    100% {
      box-shadow: 0px 12px 60px
        color-mix(in srgb, var(--middle) 50%, transparent);
    }
  } */

  @keyframes opacityChange {
    50% {
      opacity: 1;
    }

    to {
      opacity: 0.5;
    }
  }

  @keyframes rotate {
    to {
      transform: rotate(1turn);
    }
  }
  @keyframes rotate3d {
    to {
      transform: rotate(1turn);
    }
  }

  @keyframes borders {
    0%,
    100% {
      border-width: calc(var(--font) * 0.2) calc(var(--font) * 0.1)
        calc(var(--font) * 0.02) calc(var(--font) * 0.02);
    }
    25% {
      border-width: calc(var(--font) * 0.1) calc(var(--font) * 0.02)
        calc(var(--font) * 0.02) calc(var(--font) * 0.2);
    }
    50% {
      border-width: calc(var(--font) * 0.02) calc(var(--font) * 0.02)
        calc(var(--font) * 0.2) calc(var(--font) * 0.1);
    }
    75% {
      border-width: calc(var(--font) * 0.02) calc(var(--font) * 0.2)
        calc(var(--font) * 0.1) calc(var(--font) * 0.02);
    }
  }
</style>
