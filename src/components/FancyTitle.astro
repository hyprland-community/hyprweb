---
interface Props {
  label: string
  Element?: "h1" | "h2" | "h3" | "h4"
  classes?: string
  colors?: readonly [top: string, middle: string, bottom: string]
  sizeClasses?: string
}

import { hyprThemeColors } from "#lib/consts"
import { setMinimumReadableLightness } from "#lib/helper"

const {
  label,
  colors = hyprThemeColors,
  classes = "text-center",
  sizeClasses,
} = Astro.props

const [top, middle, bottom] = colors
---

<div
  data-fancy-title
  class="relative"
  class:list={[
    "relative font-bold",
    classes,
    sizeClasses ?? "text-5xl sm:text-6xl md:text-7xl lg:text-8xl",
  ]}
>
  <!-- <h1 class="sr-only">{label}</h1> -->
  <div class="shadow_ flex" aria-hidden="true">
    <div class="top">
      {label}
    </div>
    <div class="middle">
      {label}
    </div>
    <div class="bottom">
      {label}
    </div>
  </div>

  <!-- Have the label inside here, so that it is selectable -->
  <div class="interaction-zone"><h1>{label}</h1></div>
</div>

<script>
  const fancyTitles = Array.from(
    document.querySelectorAll("[data-fancy-title]"),
  ) as HTMLElement[]

  fancyTitles.forEach((element) => {
    // @ts-expect-error
    document.addEventListener("mousemove", move(element))
    // element.addEventListener("mouseleave", end(element))
  })

  function move(
    titleWrapper: HTMLElement,
  ): (event: MouseEvent & { currentTarget: HTMLElement }) => void {
    const { top, middle, bottom } = getElements(titleWrapper)

    return (event) => {
      /* Max distance the mouse can be away for the title to react
         Some squared thing, so the number has to be very high */
      const maxDistance = 255550
      const offsetMultiplier = 17

      const mouseX = event.clientX
      const mouseY = event.clientY
      const {
        bottom: rectBottom,
        height,
        right,
        left,
        top: rectTop,
        width,
        x: rectX,
        y: rectY,
      } = titleWrapper.getBoundingClientRect()
      const center = [
        left + titleWrapper.clientWidth / 2,
        rectBottom + titleWrapper.clientHeight / 2,
      ] as const
      const dx = Math.max(Math.abs(mouseX - center[0]) - width / 2, 0)
      const dy = Math.max(Math.abs(mouseY - center[1]) - height / 2, 0)
      const distance = dx * dx + dy * dy

      const fallof = 1 - Math.min(Math.abs(distance), maxDistance) / maxDistance
      const offset = fallof * fallof * offsetMultiplier
      console.log(mouseX, mouseY, distance)

      top.style.transform = `translate(${(Math.sin(mouseX / 60) * offset) / 2}px, ${(Math.sin(mouseY / 60) * offset) / 2}px)`
      middle.style.transform = `translate(${Math.sin(mouseX / 50) * offset}px, ${Math.sin(mouseY / 50) * offset}px)`
      bottom.style.transform = `translate(${Math.sin(mouseX / 40) * offset}px, ${Math.sin(mouseY / 40) * offset}px)`
    }
  }

  function end(element: HTMLElement): () => void {
    const { top, middle, bottom } = getElements(element)

    return () => {
      top.style.transform = ""
      middle.style.transform = ""
      bottom.style.transform = ""
    }
  }

  function getElements(wrapper: HTMLElement) {
    return {
      top: wrapper.querySelector(".top") as HTMLElement,
      middle: wrapper.querySelector(".middle") as HTMLElement,
      bottom: wrapper.querySelector(".bottom") as HTMLElement,
    }
  }
</script>

<style lang='postcss' define:vars={{ top: setMinimumReadableLightness(top), middle, bottom }}>
  .top,
  .middle,
  .bottom {
    transition: all 80ms ease-in-out;
    pointer-events: none;
    width: 100%;
  }

  .top {
    color: var(--top);
  }
  .middle {
    color: var(--middle);
    @apply absolute left-0 top-0 -z-10 -translate-x-2;
  }
  .bottom {
    color: var(--bottom);
    @apply absolute left-0 top-0 -z-20 -translate-x-3;
  }

  .interaction-zone {
    width: 100%;
    left: -10%;
    height: 180%;
    top: -40%;
    position: absolute;
    pointer-events: fill;
    z-index: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    color: transparent;
    padding: 0% 10%;
    
     @media screen(md)  {
      width: 120%;
    }
  }

  .shadow_ {
    text-shadow: -2px 4px 20px var(--bottom);
  }
</style>
